{"ast":null,"code":"import _defineProperty from \"/home/rahimlisarkhan/Documents/NEXT JS LESSON/Practice/NextJs-BlogProject/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _readOnlyError from \"/home/rahimlisarkhan/Documents/NEXT JS LESSON/Practice/NextJs-BlogProject/node_modules/@babel/runtime/helpers/esm/readOnlyError\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { useMemo } from 'react';\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport rootReducer from \"./reducers\";\nvar initialState = {},\n    middleware = [thunk];\nexport var store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware.apply(void 0, middleware)));\nexport var initializeStore = function initializeStore(preloadedState) {\n  var _store2;\n\n  var _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : initStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n\n  if (preloadedState && store) {\n    _store = initStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState)); // Reset the current store\n\n    store = (_readOnlyError(\"store\"), undefined);\n  } // For SSG and SSR always create a new store\n\n\n  if (false) return _store; // Create the store once in the client\n\n  if (!store) store = (_readOnlyError(\"store\"), _store);\n  return _store;\n};\nexport function useStore(initialState) {\n  _s();\n\n  var store = useMemo(function () {\n    return initializeStore(initialState);\n  }, [initialState]);\n  return store;\n}\n\n_s(useStore, \"K8ucUnUnAgJZGJWAL9Ze8IHCmoQ=\");","map":{"version":3,"sources":["/home/rahimlisarkhan/Documents/NEXT JS LESSON/Practice/NextJs-BlogProject/redux-store/store.js"],"names":["createStore","applyMiddleware","thunk","useMemo","composeWithDevTools","rootReducer","initialState","middleware","store","initializeStore","preloadedState","_store","initStore","getState","undefined","useStore"],"mappings":";;;;;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,WAAP,MAAwB,YAAxB;AAEA,IAAMC,YAAY,GAAG,EAArB;AAAA,IACMC,UAAU,GAAG,CAACL,KAAD,CADnB;AAGA,OAAO,IAAMM,KAAK,GAAGR,WAAW,CAC9BK,WAD8B,EAE9BC,YAF8B,EAG9BF,mBAAmB,CAACH,eAAe,MAAf,SAAmBM,UAAnB,CAAD,CAHW,CAAzB;AAUP,OAAO,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAACC,cAAD,EAAoB;AAAA;;AACjD,MAAIC,MAAM,cAAGH,KAAH,6CAAYI,SAAS,CAACF,cAAD,CAA/B,CADiD,CAGjD;AACA;;;AACA,MAAIA,cAAc,IAAIF,KAAtB,EAA6B;AAC3BG,IAAAA,MAAM,GAAGC,SAAS,iCACbJ,KAAK,CAACK,QAAN,EADa,GAEbH,cAFa,EAAlB,CAD2B,CAK3B;;AACAF,IAAAA,KAAK,6BAAGM,SAAH,CAAL;AACD,GAZgD,CAcjD;;;AACA,aAAmC,OAAOH,MAAP,CAfc,CAgBjD;;AACA,MAAI,CAACH,KAAL,EAAYA,KAAK,6BAAGG,MAAH,CAAL;AAEZ,SAAOA,MAAP;AACD,CApBM;AAsBP,OAAO,SAASI,QAAT,CAAkBT,YAAlB,EAAgC;AAAA;;AACrC,MAAME,KAAK,GAAGL,OAAO,CAAC;AAAA,WAAMM,eAAe,CAACH,YAAD,CAArB;AAAA,GAAD,EAAsC,CAACA,YAAD,CAAtC,CAArB;AACA,SAAOE,KAAP;AACD;;GAHeO,Q","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { useMemo } from 'react';\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport rootReducer from \"./reducers\";\n\nconst initialState = {},\n      middleware = [thunk];\n\nexport const store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\n\n\n\n\nexport const initializeStore = (preloadedState) => {\n  let _store = store ?? initStore(preloadedState)\n\n  // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n  if (preloadedState && store) {\n    _store = initStore({\n      ...store.getState(),\n      ...preloadedState,\n    })\n    // Reset the current store\n    store = undefined\n  }\n\n  // For SSG and SSR always create a new store\n  if (typeof window === 'undefined') return _store\n  // Create the store once in the client\n  if (!store) store = _store\n\n  return _store\n}\n\nexport function useStore(initialState) {\n  const store = useMemo(() => initializeStore(initialState), [initialState])\n  return store\n}"]},"metadata":{},"sourceType":"module"}