{"ast":null,"code":"import _regeneratorRuntime from \"/home/rahimlisarkhan/Documents/NEXT JS LESSON/Practice/NextJs-BlogProject/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/home/rahimlisarkhan/Documents/NEXT JS LESSON/Practice/NextJs-BlogProject/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/home/rahimlisarkhan/Documents/NEXT JS LESSON/Practice/NextJs-BlogProject/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { getEventsData } from \"../../api/event\";\nimport * as type from '../type'; //find event for router\n\nexport var findEventHandler = function findEventHandler(year, month, callback) {\n  callback(\"/events/list/\".concat(year, \"/\").concat(month));\n};\nexport var getEvents = function getEvents() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var res, events, key;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return getEventsData();\n\n            case 2:\n              res = _context.sent;\n              events = [];\n\n              for (key in res) {\n                events.push(_objectSpread({\n                  id: key\n                }, res[key]));\n              }\n\n              dispatch({\n                type: type.GET_EVENTS,\n                payload: events\n              });\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/home/rahimlisarkhan/Documents/NEXT JS LESSON/Practice/NextJs-BlogProject/redux-store/action/index.js"],"names":["getEventsData","type","findEventHandler","year","month","callback","getEvents","dispatch","res","events","key","push","id","GET_EVENTS","payload"],"mappings":";;;;;;;;AAAA,SAASA,aAAT,QAA8B,iBAA9B;AACA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB,C,CAEA;;AACA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD,EAAMC,KAAN,EAAYC,QAAZ,EAAwB;AACpDA,EAAAA,QAAQ,wBAAiBF,IAAjB,cAAyBC,KAAzB,EAAR;AACH,CAFM;AAKP,OAAO,IAAME,SAAS,GAAE,SAAXA,SAAW;AAAA;AAAA,wEAAM,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAERP,aAAa,EAFL;;AAAA;AAEpBQ,cAAAA,GAFoB;AAIpBC,cAAAA,MAJoB,GAIX,EAJW;;AAM1B,mBAAUC,GAAV,IAAiBF,GAAjB,EAAqB;AACjBC,gBAAAA,MAAM,CAACE,IAAP;AACIC,kBAAAA,EAAE,EAACF;AADP,mBAEOF,GAAG,CAACE,GAAD,CAFV;AAGM;;AAEVH,cAAAA,QAAQ,CAAC;AAACN,gBAAAA,IAAI,EAACA,IAAI,CAACY,UAAX;AAAuBC,gBAAAA,OAAO,EAACL;AAA/B,eAAD,CAAR;;AAZ0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAN;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB","sourcesContent":["import { getEventsData } from \"../../api/event\"\nimport * as type from '../type'\n\n//find event for router\nexport const findEventHandler = (year,month,callback) =>{\n    callback(`/events/list/${year}/${month}`)\n} \n\n\nexport const getEvents= () => async dispatch => {\n \n    const res = await getEventsData()\n\n    const events = [];\n\n    for(const key in res){\n        events.push({\n            id:key,\n            ...res[key]}\n            )}\n\n    dispatch({type:type.GET_EVENTS, payload:events})\n    \n}    "]},"metadata":{},"sourceType":"module"}