{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { useMemo } from \"react\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport rootReducer from \"./reducers\";\nconst initialState = {},\n      middleware = [thunk];\nlet store;\n\nlet initStore = (preloadedState = initialState) => {\n  return createStore(rootReducer, preloadedState, composeWithDevTools(applyMiddleware(...middleware)));\n};\n\nexport const initializeStore = preloadedState => {\n  var _store2;\n\n  let _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : initStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n\n  if (preloadedState && store) {\n    _store = initStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState)); // Reset the current store\n\n    store = undefined;\n  } // For SSG and SSR always create a new store\n\n\n  if (true) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return _store;\n}; //Contect MyApp\n\nexport let useStore = initialState => {\n  const store = useMemo(() => initializeStore(initialState), [initialState]);\n  return store;\n};","map":{"version":3,"sources":["/home/rahimlisarkhan/Documents/NEXT JS LESSON/Practice/NextJs-BlogProject/redux-store/store.js"],"names":["createStore","applyMiddleware","thunk","useMemo","composeWithDevTools","rootReducer","initialState","middleware","store","initStore","preloadedState","initializeStore","_store","getState","undefined","useStore"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,WAAP,MAAwB,YAAxB;AAEA,MAAMC,YAAY,GAAG,EAArB;AAAA,MACMC,UAAU,GAAG,CAACL,KAAD,CADnB;AAGA,IAAIM,KAAJ;;AAEA,IAAIC,SAAS,GAAG,CAACC,cAAc,GAAGJ,YAAlB,KAAmC;AACjD,SAAON,WAAW,CAChBK,WADgB,EAEhBK,cAFgB,EAGhBN,mBAAmB,CAACH,eAAe,CAAC,GAAGM,UAAJ,CAAhB,CAHH,CAAlB;AAKD,CAND;;AAQA,OAAO,MAAMI,eAAe,GAAID,cAAD,IAAoB;AAAA;;AACjD,MAAIE,MAAM,cAAGJ,KAAH,6CAAYC,SAAS,CAACC,cAAD,CAA/B,CADiD,CAGjD;AACA;;;AACA,MAAIA,cAAc,IAAIF,KAAtB,EAA6B;AAC3BI,IAAAA,MAAM,GAAGH,SAAS,iCACbD,KAAK,CAACK,QAAN,EADa,GAEbH,cAFa,EAAlB,CAD2B,CAK3B;;AACAF,IAAAA,KAAK,GAAGM,SAAR;AACD,GAZgD,CAcjD;;;AACA,YAAmC,OAAOF,MAAP,CAfc,CAgBjD;;AACA,MAAI,CAACJ,KAAL,EAAYA,KAAK,GAAGI,MAAR;AAEZ,SAAOA,MAAP;AACD,CApBM,C,CAsBP;;AACA,OAAO,IAAIG,QAAQ,GAAIT,YAAD,IAAkB;AACtC,QAAME,KAAK,GAAGL,OAAO,CAAC,MAAMQ,eAAe,CAACL,YAAD,CAAtB,EAAsC,CAACA,YAAD,CAAtC,CAArB;AACA,SAAOE,KAAP;AACD,CAHM","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { useMemo } from \"react\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport rootReducer from \"./reducers\";\n\nconst initialState = {},\n      middleware = [thunk];\n\nlet store;\n\nlet initStore = (preloadedState = initialState) => {\n  return createStore(\n    rootReducer,\n    preloadedState,\n    composeWithDevTools(applyMiddleware(...middleware))\n  );\n};\n\nexport const initializeStore = (preloadedState) => {\n  let _store = store ?? initStore(preloadedState);\n\n  // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n  if (preloadedState && store) {\n    _store = initStore({\n      ...store.getState(),\n      ...preloadedState,\n    });\n    // Reset the current store\n    store = undefined;\n  }\n\n  // For SSG and SSR always create a new store\n  if (typeof window === \"undefined\") return _store;\n  // Create the store once in the client\n  if (!store) store = _store;\n\n  return _store;\n};\n\n//Contect MyApp\nexport let useStore = (initialState) => {\n  const store = useMemo(() => initializeStore(initialState), [initialState]);\n  return store;\n};\n"]},"metadata":{},"sourceType":"module"}