{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/rahimlisarkhan/Documents/NEXT JS LESSON/Practice/NextJs-BlogProject/pages/events/list/[...slug].js\";\nimport { useRouter } from \"next/router\"; // import {findEventHandler} from '../../../redux-store/action'\n// import Loading from \"../../../components/ui/loading\";\n// import Eventlist from \"../../../components/events/event-list\";\n// import EventSearch from '../../../components/events/event-search'\n\nimport Layout from \"../../../components/layout/layout\";\nimport { initializeStore } from \"../../../redux-store/store\";\nimport * as actionTypes from '../../../redux-store/type';\nimport { getFilteredEvents } from \"../../../data/dummy-data\";\n\nconst FilteredEventsPage = props => {\n  const router = useRouter();\n  const {\n    events\n  } = props.initialReduxState.eventPage;\n  console.log(events);\n\n  if (!events) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 25\n    }, this);\n  }\n\n  if (!events || events.length === 0) {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: [/*#__PURE__*/_jsxDEV(EventSearch, {\n        findEventHandler: (year, month) => findEventHandler(year, month, router.push)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ErrorAlert, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No events found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this);\n  }\n\n  if (props.hasError) {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: [/*#__PURE__*/_jsxDEV(EventSearch, {\n        findEventHandler: (year, month) => findEventHandler(year, month, router.push)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ErrorAlert, {\n        children: \"Invalid filter value \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(EventSearch, {\n      findEventHandler: (year, month) => findEventHandler(year, month, router.push)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Eventlist, {\n      items: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\nexport async function getServerSideProps(context) {\n  const {\n    params\n  } = context;\n  const reduxStore = initializeStore(),\n        {\n    dispatch\n  } = reduxStore;\n  const filterDate = params.slug,\n        year = +filterDate[0],\n        month = +filterDate[1];\n  const filterData = getFilteredEvents({\n    year,\n    month\n  });\n  dispatch({\n    type: actionTypes.GET_EVENTS,\n    payload: filterData\n  });\n\n  if (isNaN(year) || isNaN(month) || year > 2030 || year < 2021 || month < 1 || month > 12) {\n    return {\n      props: {\n        hasError: true\n      }\n    };\n  } //reduxstore\n\n\n  return {\n    props: {\n      initialReduxState: reduxStore.getState()\n    }\n  };\n}\nexport default FilteredEventsPage;","map":{"version":3,"sources":["/home/rahimlisarkhan/Documents/NEXT JS LESSON/Practice/NextJs-BlogProject/pages/events/list/[...slug].js"],"names":["useRouter","Layout","initializeStore","actionTypes","getFilteredEvents","FilteredEventsPage","props","router","events","initialReduxState","eventPage","console","log","length","year","month","findEventHandler","push","hasError","getServerSideProps","context","params","reduxStore","dispatch","filterDate","slug","filterData","type","GET_EVENTS","payload","isNaN","getState"],"mappings":"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","sourcesContent":["import { useRouter } from \"next/router\";\n// import {findEventHandler} from '../../../redux-store/action'\n// import Loading from \"../../../components/ui/loading\";\n// import Eventlist from \"../../../components/events/event-list\";\n// import EventSearch from '../../../components/events/event-search'\nimport Layout from \"../../../components/layout/layout\";\nimport { initializeStore } from \"../../../redux-store/store\";\nimport * as actionTypes from '../../../redux-store/type'\nimport { getFilteredEvents } from \"../../../data/dummy-data\";\n\n\nconst FilteredEventsPage = (props) => {\n  const router = useRouter();\n\n  const {events} = props.initialReduxState.eventPage\n\n  console.log(events);\n\n  if (!events) { return <Loading />}\n\n\n  \n \n  if (!events || events.length === 0) { \n      return(\n        <Layout>\n            <EventSearch findEventHandler={(year,month) => findEventHandler(year,month,router.push)}/>\n            <ErrorAlert><p>No events found</p></ErrorAlert>\n        </Layout>\n      )}\n\n  if (props.hasError){ \n    return( \n        <Layout>\n            <EventSearch findEventHandler={(year,month) => findEventHandler(year,month,router.push)}/>\n            <ErrorAlert>Invalid filter value </ErrorAlert>\n        </Layout>\n  )}\n\n\n  return (\n        <Layout>\n            <EventSearch findEventHandler={(year,month) => findEventHandler(year,month,router.push)}/>\n            <Eventlist items={events} />\n        </Layout>\n  );\n};\n\n\n\n  \nexport async function getServerSideProps(context){\n\n  const {params} = context\n\n  const reduxStore = initializeStore(),\n        {dispatch} = reduxStore\n  \n\n      \n  const filterDate = params.slug,\n        year = +filterDate[0],\n        month = +filterDate[1];\n\n  const filterData = getFilteredEvents({year, month})\n  dispatch({type:actionTypes.GET_EVENTS, payload:filterData})  \n\n\n  if (isNaN(year) ||\n      isNaN(month) ||\n      year > 2030 ||\n      year < 2021 ||\n      month < 1 ||\n      month > 12){ \n      return{ \n      props:{hasError:true}}}\n\n    \n    //reduxstore\n    return { props: { initialReduxState: reduxStore.getState() } }\n\n\n}\n\n\nexport default FilteredEventsPage;\n"]},"metadata":{},"sourceType":"module"}