{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/rahimlisarkhan/Documents/NEXT JS LESSON/Practice/NextJs-BlogProject/pages/events/list/[...slug].js\";\nimport { useRouter } from \"next/router\";\nimport { findEventHandler } from '../../../redux-store/action';\nimport Loading from \"../../../components/ui/loading\";\nimport Eventlist from \"../../../components/events/event-list\";\nimport EventSearch from '../../../components/events/event-search';\nimport Layout from \"../../../components/layout/layout\";\nimport { initializeStore } from \"../../../redux-store/store\";\nimport * as actionTypes from '../../../redux-store/type';\nimport { getFilteredEvents } from \"../../../data/dummy-data\";\n\nconst FilteredEventsPage = props => {\n  const router = useRouter();\n  console.log(props); // if (!router.query.slug) { return <Loading />}\n  // if (!filterData || filterData.length === 0) { \n  //     return(\n  //       <Layout>\n  //           <EventSearch findEventHandler={(year,month) => findEventHandler(year,month,router.push)}/>\n  //           <ErrorAlert><p>No events found</p></ErrorAlert>\n  //       </Layout>\n  //     )}\n  // if (props.hasError){ \n  //   return( \n  //       <Layout>\n  //           <EventSearch findEventHandler={(year,month) => findEventHandler(year,month,router.push)}/>\n  //           <ErrorAlert>Invalid filter value </ErrorAlert>\n  //       </Layout>\n  // )}\n\n  return /*#__PURE__*/_jsxDEV(Layout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\nexport async function getServerSideProps(context) {\n  const {\n    params\n  } = context;\n  const reduxStore = initializeStore(),\n        {\n    dispatch\n  } = reduxStore;\n  const filterDate = params.slug,\n        year = +filterDate[0],\n        month = +filterDate[1]; // if (\n  //   isNaN(year) ||\n  //   isNaN(month) ||\n  //   year > 2030 ||\n  //   year < 2021 ||\n  //   month < 1 ||\n  //   month > 12\n  // ) { \n  //   return{ \n  //     props:{hasError:true}\n  // }}\n\n  const filterData = getFilteredEvents(year, month); // dispatch({type:actionTypes.GET_EVENTS, payload:filterData})  \n  //reduxstore\n  // return { props: { initialReduxState: reduxStore.getState() },revalidate:30 }\n\n  return {\n    props: filterData,\n    revalidate: 30\n  };\n}\nexport default FilteredEventsPage;","map":{"version":3,"sources":["/home/rahimlisarkhan/Documents/NEXT JS LESSON/Practice/NextJs-BlogProject/pages/events/list/[...slug].js"],"names":["useRouter","findEventHandler","Loading","Eventlist","EventSearch","Layout","initializeStore","actionTypes","getFilteredEvents","FilteredEventsPage","props","router","console","log","getServerSideProps","context","params","reduxStore","dispatch","filterDate","slug","year","month","filterData","revalidate"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAAQC,gBAAR,QAA+B,6BAA/B;AACA,OAAOC,OAAP,MAAoB,gCAApB;AACA,OAAOC,SAAP,MAAsB,uCAAtB;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,OAAO,KAAKC,WAAZ,MAA6B,2BAA7B;AACA,SAASC,iBAAT,QAAkC,0BAAlC;;AAGA,MAAMC,kBAAkB,GAAIC,KAAD,IAAW;AACpC,QAAMC,MAAM,GAAGX,SAAS,EAAxB;AAEAY,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAHoC,CAKpC;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,sBACM,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,UADN;AAMD,CAjCD;;AAsCA,OAAO,eAAeI,kBAAf,CAAkCC,OAAlC,EAA0C;AAE/C,QAAM;AAACC,IAAAA;AAAD,MAAWD,OAAjB;AAEA,QAAME,UAAU,GAAGX,eAAe,EAAlC;AAAA,QACM;AAACY,IAAAA;AAAD,MAAaD,UADnB;AAKA,QAAME,UAAU,GAAGH,MAAM,CAACI,IAA1B;AAAA,QACMC,IAAI,GAAG,CAACF,UAAU,CAAC,CAAD,CADxB;AAAA,QAEMG,KAAK,GAAG,CAACH,UAAU,CAAC,CAAD,CAFzB,CAT+C,CAajD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,QAAMI,UAAU,GAAGf,iBAAiB,CAACa,IAAD,EAAOC,KAAP,CAApC,CAzB6C,CA0B7C;AAGA;AACA;;AACA,SAAO;AAAEZ,IAAAA,KAAK,EAAEa,UAAT;AAAoBC,IAAAA,UAAU,EAAC;AAA/B,GAAP;AAGH;AAGD,eAAef,kBAAf","sourcesContent":["import { useRouter } from \"next/router\";\nimport {findEventHandler} from '../../../redux-store/action'\nimport Loading from \"../../../components/ui/loading\";\nimport Eventlist from \"../../../components/events/event-list\";\nimport EventSearch from '../../../components/events/event-search'\nimport Layout from \"../../../components/layout/layout\";\nimport { initializeStore } from \"../../../redux-store/store\";\nimport * as actionTypes from '../../../redux-store/type'\nimport { getFilteredEvents } from \"../../../data/dummy-data\";\n\n\nconst FilteredEventsPage = (props) => {\n  const router = useRouter();\n\n  console.log(props);\n\n  // if (!router.query.slug) { return <Loading />}\n\n\n  \n \n  // if (!filterData || filterData.length === 0) { \n  //     return(\n  //       <Layout>\n  //           <EventSearch findEventHandler={(year,month) => findEventHandler(year,month,router.push)}/>\n  //           <ErrorAlert><p>No events found</p></ErrorAlert>\n  //       </Layout>\n  //     )}\n\n  // if (props.hasError){ \n  //   return( \n  //       <Layout>\n  //           <EventSearch findEventHandler={(year,month) => findEventHandler(year,month,router.push)}/>\n  //           <ErrorAlert>Invalid filter value </ErrorAlert>\n  //       </Layout>\n  // )}\n\n\n  return (\n        <Layout>\n            {/* <EventSearch findEventHandler={(year,month) => findEventHandler(year,month,router.push)}/>\n            <Eventlist items={filterData} /> */}\n        </Layout>\n  );\n};\n\n\n\n  \nexport async function getServerSideProps(context){\n\n  const {params} = context\n\n  const reduxStore = initializeStore(),\n        {dispatch} = reduxStore\n  \n\n      \n  const filterDate = params.slug,\n        year = +filterDate[0],\n        month = +filterDate[1];\n\n// if (\n//   isNaN(year) ||\n//   isNaN(month) ||\n//   year > 2030 ||\n//   year < 2021 ||\n//   month < 1 ||\n//   month > 12\n// ) { \n//   return{ \n//     props:{hasError:true}\n// }}\n\n    const filterData = getFilteredEvents(year, month)\n    // dispatch({type:actionTypes.GET_EVENTS, payload:filterData})  \n\n    \n    //reduxstore\n    // return { props: { initialReduxState: reduxStore.getState() },revalidate:30 }\n    return { props: filterData,revalidate:30 }\n\n\n}\n\n\nexport default FilteredEventsPage;\n"]},"metadata":{},"sourceType":"module"}