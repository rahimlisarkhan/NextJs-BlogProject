{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/rahimlisarkhan/Documents/NEXT JS LESSON/Practice/NextJs-BlogProject/pages/events/list/[...slug].js\",\n    _this = this;\n\nimport { useRouter } from \"next/router\"; // import {findEventHandler} from '../../../redux-store/action'\n// import Loading from \"../../../components/ui/loading\";\n// import Eventlist from \"../../../components/events/event-list\";\n// import EventSearch from '../../../components/events/event-search'\n\nimport Layout from \"../../../components/layout/layout\";\n\nvar FilteredEventsPage = function FilteredEventsPage(props) {\n  // const router = useRouter();\n  console.log(props); // if (!router.query.slug) { return <Loading />}\n  // if (!filterData || filterData.length === 0) { \n  //     return(\n  //       <Layout>\n  //           <EventSearch findEventHandler={(year,month) => findEventHandler(year,month,router.push)}/>\n  //           <ErrorAlert><p>No events found</p></ErrorAlert>\n  //       </Layout>\n  //     )}\n  // if (props.hasError){ \n  //   return( \n  //       <Layout>\n  //           <EventSearch findEventHandler={(year,month) => findEventHandler(year,month,router.push)}/>\n  //           <ErrorAlert>Invalid filter value </ErrorAlert>\n  //       </Layout>\n  // )}\n\n  return /*#__PURE__*/_jsxDEV(Layout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, _this);\n};\n\n_c = FilteredEventsPage;\nexport var __N_SSP = true;\nexport default FilteredEventsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"FilteredEventsPage\");","map":{"version":3,"sources":["/home/rahimlisarkhan/Documents/NEXT JS LESSON/Practice/NextJs-BlogProject/pages/events/list/[...slug].js"],"names":["useRouter","Layout","FilteredEventsPage","props","console","log"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B,C,CACA;AACA;AACA;AACA;;AACA,OAAOC,MAAP,MAAmB,mCAAnB;;AAMA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAW;AACpC;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAHoC,CAKpC;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,sBACM,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,WADN;AAMD,CAjCD;;KAAMD,kB;;AAwEN,eAAeA,kBAAf","sourcesContent":["import { useRouter } from \"next/router\";\n// import {findEventHandler} from '../../../redux-store/action'\n// import Loading from \"../../../components/ui/loading\";\n// import Eventlist from \"../../../components/events/event-list\";\n// import EventSearch from '../../../components/events/event-search'\nimport Layout from \"../../../components/layout/layout\";\nimport { initializeStore } from \"../../../redux-store/store\";\nimport * as actionTypes from '../../../redux-store/type'\nimport { getFilteredEvents } from \"../../../data/dummy-data\";\n\n\nconst FilteredEventsPage = (props) => {\n  // const router = useRouter();\n\n  console.log(props);\n\n  // if (!router.query.slug) { return <Loading />}\n\n\n  \n \n  // if (!filterData || filterData.length === 0) { \n  //     return(\n  //       <Layout>\n  //           <EventSearch findEventHandler={(year,month) => findEventHandler(year,month,router.push)}/>\n  //           <ErrorAlert><p>No events found</p></ErrorAlert>\n  //       </Layout>\n  //     )}\n\n  // if (props.hasError){ \n  //   return( \n  //       <Layout>\n  //           <EventSearch findEventHandler={(year,month) => findEventHandler(year,month,router.push)}/>\n  //           <ErrorAlert>Invalid filter value </ErrorAlert>\n  //       </Layout>\n  // )}\n\n\n  return (\n        <Layout>\n            {/* <EventSearch findEventHandler={(year,month) => findEventHandler(year,month,router.push)}/>\n            <Eventlist items={filterData} /> */}\n        </Layout>\n  );\n};\n\n\n\n  \nexport async function getServerSideProps(context){\n\n  const {params} = context\n\n  const reduxStore = initializeStore(),\n        {dispatch} = reduxStore\n  \n\n      \n  const filterDate = params.slug,\n        year = +filterDate[0],\n        month = +filterDate[1];\n\n  const filterData = getFilteredEvents(year, month)\n  dispatch({type:actionTypes.GET_EVENTS, payload:filterData})  \n\n\n  if (isNaN(year) ||\n      isNaN(month) ||\n      year > 2030 ||\n      year < 2021 ||\n      month < 1 ||\n      month > 12){ \n      return{ \n      props:{hasError:true}}}\n\n    \n    //reduxstore\n    return { props: { initialReduxState: reduxStore.getState() } }\n\n\n}\n\n\nexport default FilteredEventsPage;\n"]},"metadata":{},"sourceType":"module"}