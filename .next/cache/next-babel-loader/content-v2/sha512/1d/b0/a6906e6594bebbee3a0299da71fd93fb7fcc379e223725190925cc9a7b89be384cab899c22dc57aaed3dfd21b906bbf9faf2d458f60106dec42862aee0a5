{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/rahimlisarkhan/Documents/NEXT JS LESSON/Practice/NextJs-BlogProject/pages/events/list/[...slug].js\";\nimport { useRouter } from \"next/router\";\nimport { findEventHandler } from '../../../action/';\nimport Loading from \"../../../components/ui/loading\";\nimport Eventlist from \"../../../components/events/event-list\";\nimport EventSearch from '../../../components/events/event-search';\nimport Layout from \"../../../components/layout/layout\";\nimport { initializeStore } from \"../../../redux-store/store\";\nimport * as actionTypes from '../../../redux-store/type';\n\nconst FilteredEventsPage = props => {\n  const router = useRouter();\n  console.log(props); // if (!router.query.slug) { return <Loading />}\n  // if (!filterData || filterData.length === 0) { \n  //     return(\n  //       <Layout>\n  //           <EventSearch findEventHandler={(year,month) => findEventHandler(year,month,router.push)}/>\n  //           <ErrorAlert><p>No events found</p></ErrorAlert>\n  //       </Layout>\n  //     )}\n\n  if (props.hasError) {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: [/*#__PURE__*/_jsxDEV(EventSearch, {\n        findEventHandler: (year, month) => findEventHandler(year, month, router.push)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ErrorAlert, {\n        children: \"Invalid filter value \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Layout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\nexport async function getServerSideProps() {\n  const {\n    params\n  } = context;\n  const reduxStore = initializeStore(),\n        {\n    dispatch\n  } = reduxStore;\n  const filterDate = params.slug;\n  year = +filterDate[0], month = +filterDate[1];\n\n  if (isNaN(year) || isNaN(month) || year > 2030 || year < 2021 || month < 1 || month > 12) {\n    return {\n      props: {\n        hasError: true\n      }\n    };\n  }\n\n  const filterData = getFilteredEvents({\n    year,\n    month\n  });\n  dispatch({\n    type: actionTypes.GET_EVENTS,\n    payload: filterData\n  }); //reduxstore\n\n  return {\n    props: {\n      initialReduxState: reduxStore.getState()\n    },\n    revalidate: 30\n  };\n}\nexport default FilteredEventsPage;","map":{"version":3,"sources":["/home/rahimlisarkhan/Documents/NEXT JS LESSON/Practice/NextJs-BlogProject/pages/events/list/[...slug].js"],"names":["useRouter","findEventHandler","Loading","Eventlist","EventSearch","Layout","initializeStore","actionTypes","FilteredEventsPage","props","router","console","log","hasError","year","month","push","getServerSideProps","params","context","reduxStore","dispatch","filterDate","slug","isNaN","filterData","getFilteredEvents","type","GET_EVENTS","payload","initialReduxState","getState","revalidate"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAAQC,gBAAR,QAA+B,kBAA/B;AACA,OAAOC,OAAP,MAAoB,gCAApB;AACA,OAAOC,SAAP,MAAsB,uCAAtB;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,OAAO,KAAKC,WAAZ,MAA6B,2BAA7B;;AAGA,MAAMC,kBAAkB,GAAIC,KAAD,IAAW;AACpC,QAAMC,MAAM,GAAGV,SAAS,EAAxB;AAEAW,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAHoC,CAKpC;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIA,KAAK,CAACI,QAAV,EAAmB;AACjB,wBACI,QAAC,MAAD;AAAA,8BACI,QAAC,WAAD;AAAa,QAAA,gBAAgB,EAAE,CAACC,IAAD,EAAMC,KAAN,KAAgBd,gBAAgB,CAACa,IAAD,EAAMC,KAAN,EAAYL,MAAM,CAACM,IAAnB;AAA/D;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAKA;;AAGF,sBACM,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,UADN;AAMD,CAjCD;;AAsCA,OAAO,eAAeC,kBAAf,GAAmC;AAExC,QAAM;AAACC,IAAAA;AAAD,MAAWC,OAAjB;AAEA,QAAMC,UAAU,GAAGd,eAAe,EAAlC;AAAA,QACM;AAACe,IAAAA;AAAD,MAAaD,UADnB;AAKA,QAAME,UAAU,GAAGJ,MAAM,CAACK,IAA1B;AACMT,EAAAA,IAAI,GAAG,CAACQ,UAAU,CAAC,CAAD,CAAlB,EACAP,KAAK,GAAG,CAACO,UAAU,CAAC,CAAD,CADnB;;AAGR,MACEE,KAAK,CAACV,IAAD,CAAL,IACAU,KAAK,CAACT,KAAD,CADL,IAEAD,IAAI,GAAG,IAFP,IAGAA,IAAI,GAAG,IAHP,IAIAC,KAAK,GAAG,CAJR,IAKAA,KAAK,GAAG,EANV,EAOE;AACA,WAAM;AACJN,MAAAA,KAAK,EAAC;AAACI,QAAAA,QAAQ,EAAC;AAAV;AADF,KAAN;AAEA;;AAEE,QAAMY,UAAU,GAAGC,iBAAiB,CAAC;AAACZ,IAAAA,IAAD;AAAOC,IAAAA;AAAP,GAAD,CAApC;AACAM,EAAAA,QAAQ,CAAC;AAACM,IAAAA,IAAI,EAACpB,WAAW,CAACqB,UAAlB;AAA8BC,IAAAA,OAAO,EAACJ;AAAtC,GAAD,CAAR,CA1BsC,CA6BtC;;AACA,SAAO;AAAEhB,IAAAA,KAAK,EAAE;AAAEqB,MAAAA,iBAAiB,EAAEV,UAAU,CAACW,QAAX;AAArB,KAAT;AAAsDC,IAAAA,UAAU,EAAC;AAAjE,GAAP;AAEH;AAGD,eAAexB,kBAAf","sourcesContent":["import { useRouter } from \"next/router\";\nimport {findEventHandler} from '../../../action/'\nimport Loading from \"../../../components/ui/loading\";\nimport Eventlist from \"../../../components/events/event-list\";\nimport EventSearch from '../../../components/events/event-search'\nimport Layout from \"../../../components/layout/layout\";\nimport { initializeStore } from \"../../../redux-store/store\";\nimport * as actionTypes from '../../../redux-store/type'\n\n\nconst FilteredEventsPage = (props) => {\n  const router = useRouter();\n\n  console.log(props);\n\n  // if (!router.query.slug) { return <Loading />}\n\n\n  \n \n  // if (!filterData || filterData.length === 0) { \n  //     return(\n  //       <Layout>\n  //           <EventSearch findEventHandler={(year,month) => findEventHandler(year,month,router.push)}/>\n  //           <ErrorAlert><p>No events found</p></ErrorAlert>\n  //       </Layout>\n  //     )}\n\n  if (props.hasError){ \n    return( \n        <Layout>\n            <EventSearch findEventHandler={(year,month) => findEventHandler(year,month,router.push)}/>\n            <ErrorAlert>Invalid filter value </ErrorAlert>\n        </Layout>\n  )}\n\n\n  return (\n        <Layout>\n            {/* <EventSearch findEventHandler={(year,month) => findEventHandler(year,month,router.push)}/>\n            <Eventlist items={filterData} /> */}\n        </Layout>\n  );\n};\n\n\n\n  \nexport async function getServerSideProps(){\n\n  const {params} = context\n\n  const reduxStore = initializeStore(),\n        {dispatch} = reduxStore\n  \n\n\n  const filterDate = params.slug\n        year = +filterDate[0],\n        month = +filterDate[1];\n\nif (\n  isNaN(year) ||\n  isNaN(month) ||\n  year > 2030 ||\n  year < 2021 ||\n  month < 1 ||\n  month > 12\n) { \n  return{ \n    props:{hasError:true}\n}}\n\n    const filterData = getFilteredEvents({year, month})\n    dispatch({type:actionTypes.GET_EVENTS, payload:filterData})  \n\n    \n    //reduxstore\n    return { props: { initialReduxState: reduxStore.getState() },revalidate:30 }\n\n}\n\n\nexport default FilteredEventsPage;\n"]},"metadata":{},"sourceType":"module"}